{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nexport const cartSlice = createSlice({\n  name: \"cartS\",\n  initialState: {\n    cartItems: [],\n    cartTotalAmount: 0\n  },\n  reducers: {\n    add(state, action) {\n      const existingIndex = state.cartItems.findIndex(item => item.id === action.payload.id);\n      if (existingIndex >= 0) {\n        state.cartItems[existingIndex] = {\n          ...state.cartItems[existingIndex],\n          quantity: state.cartItems[existingIndex].quantity + action.payload.quantity\n        };\n      } else {\n        let tempProductItem = {\n          ...action.payload\n        };\n        state.cartItems.push(tempProductItem);\n      }\n    },\n    increaseCart(state, action) {\n      const existingIndex = state.cartItems.findIndex(item => item.id === action.payload.id);\n      if (existingIndex >= 0) {\n        state.cartItems[existingIndex] = {\n          ...state.cartItems[existingIndex],\n          quantity: state.cartItems[existingIndex].quantity + 1\n        };\n      } else {\n        let tempProductItem = {\n          ...action.payload\n        };\n        state.cartItems.push(tempProductItem);\n      }\n    },\n    decreaseCart(state, action) {\n      const itemIndex = state.cartItems.findIndex(item => item.id === action.payload.id);\n      if (state.cartItems[itemIndex].quantity > 1) {\n        state.cartItems[itemIndex].quantity -= 1;\n      } else if (state.cartItems[itemIndex].quantity === 1) {\n        const nextCartItems = state.cartItems.filter(item => item.id !== action.payload.id);\n        state.cartItems = nextCartItems;\n      }\n    },\n    getTotals(state, action) {\n      let {\n        total\n      } = state.cartItems.reduce((cartTotal, cartItem) => {\n        const {\n          price,\n          quantity,\n          extraPrice\n        } = cartItem;\n        const itemTotal = price * quantity + extraPrice * quantity;\n        cartTotal.total += itemTotal;\n        return cartTotal;\n      }, {\n        total: 0\n      });\n      total = parseFloat(total.toFixed(2));\n      state.cartTotalAmount = total;\n    },\n    clearCart(state, action) {\n      console.log(\"hereClear Cart\");\n      state.cartItems = [];\n    }\n  }\n});\n\n// Action creators are generated for each case reducer function\nexport const {\n  add,\n  decreaseCart,\n  getTotals,\n  clearCart,\n  increaseCart\n} = cartSlice.actions;\nexport default cartSlice.reducer;","map":{"version":3,"names":["createSlice","cartSlice","name","initialState","cartItems","cartTotalAmount","reducers","add","state","action","existingIndex","findIndex","item","id","payload","quantity","tempProductItem","push","increaseCart","decreaseCart","itemIndex","nextCartItems","filter","getTotals","total","reduce","cartTotal","cartItem","price","extraPrice","itemTotal","parseFloat","toFixed","clearCart","console","log","actions","reducer"],"sources":["/Users/qbatch/Desktop/projects/E-Commerce-App/client/src/redux/slices/cartSlice.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const cartSlice = createSlice({\n  name: \"cartS\",\n  initialState: {\n    cartItems: [],\n\n    cartTotalAmount: 0,\n  },\n  reducers: {\n    add(state, action) {\n      const existingIndex = state.cartItems.findIndex(\n        (item) => item.id === action.payload.id\n      );\n      if (existingIndex >= 0) {\n        state.cartItems[existingIndex] = {\n          ...state.cartItems[existingIndex],\n          quantity:\n            state.cartItems[existingIndex].quantity + action.payload.quantity,\n        };\n      } else {\n        let tempProductItem = { ...action.payload };\n        state.cartItems.push(tempProductItem);\n      }\n    },\n    increaseCart(state, action) {\n      const existingIndex = state.cartItems.findIndex(\n        (item) => item.id === action.payload.id\n      );\n      if (existingIndex >= 0) {\n        state.cartItems[existingIndex] = {\n          ...state.cartItems[existingIndex],\n          quantity: state.cartItems[existingIndex].quantity + 1,\n        };\n      } else {\n        let tempProductItem = { ...action.payload };\n        state.cartItems.push(tempProductItem);\n      }\n    },\n    decreaseCart(state, action) {\n      const itemIndex = state.cartItems.findIndex(\n        (item) => item.id === action.payload.id\n      );\n\n      if (state.cartItems[itemIndex].quantity > 1) {\n        state.cartItems[itemIndex].quantity -= 1;\n      } else if (state.cartItems[itemIndex].quantity === 1) {\n        const nextCartItems = state.cartItems.filter(\n          (item) => item.id !== action.payload.id\n        );\n\n        state.cartItems = nextCartItems;\n      }\n    },\n    getTotals(state, action) {\n      let { total } = state.cartItems.reduce(\n        (cartTotal, cartItem) => {\n          const { price, quantity, extraPrice } = cartItem;\n\n          const itemTotal = price * quantity + extraPrice * quantity;\n\n          cartTotal.total += itemTotal;\n\n          return cartTotal;\n        },\n        {\n          total: 0,\n        }\n      );\n      total = parseFloat(total.toFixed(2));\n      state.cartTotalAmount = total;\n    },\n    clearCart(state, action) {\n      console.log(\"hereClear Cart\");\n      state.cartItems = [];\n    },\n  },\n});\n\n// Action creators are generated for each case reducer function\nexport const { add, decreaseCart, getTotals, clearCart, increaseCart } =\n  cartSlice.actions;\n\nexport default cartSlice.reducer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}